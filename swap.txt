* Try in db signatures?
* Try instead of future in http client?
* write tests


Hey
I'm thinking of giving a talk about coroutines on next Kotlin Meetup (10-15 minutes live coding session).
But I found out that next meetup will be special because of Jetbrains talks. Maybe I should postpone my talk (people will be overwhelmed with info anyway).
What do you think?

typealias CreateTimer = () -> () -> Long

object Timer {
  fun now(): Long = System.currentTimeMillis()

  fun f(): () -> Long {
    val start = now()
    return { now() - start }
  }

  val system: CreateTimer = this::f
}

inline f: invalid code




object Timer {
  fun now(): Long = System.currentTimeMillis()

    val system: CreateTimer = {
        val start = now()
        val r: () -> Long = { this.now() - start }
        r
    }
}

object Timer {
  fun now(): Long = System.currentTimeMillis()

    val system: CreateTimer = {
        val start = now()
        { this.now() - start }
    }
}

Mouse over + results in blinking hint
    fun a(): Int {
        val a = run {
            println("block1")
        }
        return a + 1
    }
